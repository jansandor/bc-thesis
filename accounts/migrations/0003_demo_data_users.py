# Generated by Django 3.2.8 on 2022-07-09 20:58

from django.db import migrations
from faker import Faker
from accounts.utils.user import user_types, sex_choices, nationality
import random
from django.db import transaction
from django.contrib.auth.hashers import make_password
from datetime import timezone
from bp.settings.base import BASE_DIR

Faker.seed(0)
fake = Faker()  # (['cs'])
app_name = 'accounts'
psychologists_count = 25
clients_count = 35
researchers_count = 25
fake_certificate_file = 'accounts/user_fake/example_demo_psychologists_certificate_file.txt'


@transaction.atomic
def add_approved_psychologists(apps, schema_editor):
    User = apps.get_model(app_name, 'User')
    PsychologistProfile = apps.get_model(app_name, 'PsychologistProfile')
    file = open(BASE_DIR / 'approved_fake_psychologists_raw_passwords.txt', "w+")
    for i in range(0, psychologists_count):
        last_name = fake.unique.last_name()
        email = str.lower(last_name) + "@example.com"
        password = fake.password(length=12)
        user = User.objects.create(
            email=email,
            is_psychologist=True,
            first_name=fake.first_name(),
            last_name=last_name,
            email_verified=True,
            confirmed_by_staff=True,
            is_active=True,
            password=make_password(password),
            date_joined=fake.date_time(tzinfo=timezone.utc),
        )
        file.write(f'ID: {user.id}\t{email}\t{password}\n')
        user.save()
        PsychologistProfile.objects.create(
            user=user,
            user_type=user_types.PSYCHOLOGIST,
            academic_degree_before_name=fake.prefix(),
            academic_degree_after_name=fake.suffix(),
            certificate=fake_certificate_file,
            personal_key=fake.uuid4(),
        )
    # add extra approved psychologist for public testing purposes
    last_name = 'Psycholog'
    email = str.lower(last_name) + "@example.com"
    password = fake.password(length=12)
    user = User.objects.create(
        email=email,
        is_psychologist=True,
        first_name='Demo',
        last_name=last_name,
        email_verified=True,
        confirmed_by_staff=True,
        is_active=True,
        password=make_password(password),
        date_joined=fake.date_time(tzinfo=timezone.utc),
    )
    file.write(f'ID: {user.id}\t{email}\t{password}\n')
    user.save()
    PsychologistProfile.objects.create(
        user=user,
        user_type=user_types.PSYCHOLOGIST,
        academic_degree_before_name=fake.prefix(),
        academic_degree_after_name=fake.suffix(),
        certificate=fake_certificate_file,
        personal_key=fake.uuid4(),
    )
    file.close()


@transaction.atomic
def add_not_approved_psychologists(apps, schema_editor):
    User = apps.get_model(app_name, 'User')
    PsychologistProfile = apps.get_model(app_name, 'PsychologistProfile')
    for i in range(0, psychologists_count):
        last_name = fake.unique.last_name()
        user = User.objects.create(
            email=str.lower(last_name) + "@example.com",
            is_psychologist=True,
            first_name=fake.first_name(),
            last_name=last_name,
            email_verified=True,
            confirmed_by_staff=False,
            is_active=False,
            date_joined=fake.date_time(tzinfo=timezone.utc),
            password=make_password(fake.password(length=12)),
        )
        user.save()
        PsychologistProfile.objects.create(
            user=user,
            user_type=user_types.PSYCHOLOGIST,
            academic_degree_before_name=fake.prefix(),
            academic_degree_after_name=fake.suffix(),
            certificate=fake_certificate_file,
            personal_key=fake.uuid4(),
        )


@transaction.atomic
def add_clients(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    User = apps.get_model(app_name, 'User')
    ClientProfile = apps.get_model(app_name, 'ClientProfile')
    psychologists = User.objects.filter(is_psychologist=True, confirmed_by_staff=True).exclude(
        email='psycholog@example.com')
    for i in range(0, clients_count):
        last_name = fake.unique.last_name()
        user = User.objects.create(
            email=str.lower(last_name) + "@example.com",
            is_client=True,
            first_name=fake.first_name(),
            last_name=last_name,
            email_verified=True,
            is_active=True,
            password=make_password(fake.password(length=12)),
            date_joined=fake.date_time(tzinfo=timezone.utc),
        )
        user.save()
        random_index = random.randrange(len(psychologists))
        ClientProfile.objects.create(
            user=user,
            user_type=user_types.CLIENT,
            psychologist=psychologists[random_index],
            birthdate=fake.date_of_birth(),
            sex=sex_choices.SEX_CHOICES[random.randrange(len(sex_choices.SEX_CHOICES))][0],
            nationality=nationality.CHOICES[random.randrange(len(nationality.CHOICES))][0],
            terms_accepted=True,
        )
    # add extra clients for psycholog@example.com; public testing purposes
    psychologist = User.objects.get(email='psycholog@example.com')
    file = open(BASE_DIR / 'demo_clients_raw_passwords.txt', "w+")
    for i in range(0, 8):
        last_name = fake.unique.last_name()
        email = str.lower(last_name) + "@example.com"
        password = fake.password(length=12)
        user = User.objects.create(
            email=email,
            is_client=True,
            first_name=f'Demo Klient #{i}',
            last_name=last_name,
            email_verified=True,
            is_active=True,
            password=make_password(password),
            date_joined=fake.date_time(tzinfo=timezone.utc),
        )
        file.write(f'ID: {user.id}\t{email}\t{password}\n')
        user.save()
        ClientProfile.objects.create(
            user=user,
            user_type=user_types.CLIENT,
            psychologist=psychologist,
            birthdate=fake.date_of_birth(),
            sex=sex_choices.SEX_CHOICES[random.randrange(len(sex_choices.SEX_CHOICES))][0],
            nationality=nationality.CHOICES[random.randrange(len(nationality.CHOICES))][0],
            terms_accepted=True,
        )
    file.close()


@transaction.atomic
def add_researchers(apps, schema_editor):
    User = apps.get_model(app_name, 'User')
    # ResearcherProfile = apps.get_model(app_name, 'ResearcherProfile')
    file = open(BASE_DIR / 'fake_researchers_raw_passwords.txt', "w+")
    for i in range(0, researchers_count):
        last_name = fake.unique.last_name()
        email = str.lower(last_name) + "@example.com"
        password = fake.password(length=12)
        user = User.objects.create(
            email=email,
            is_researcher=True,
            first_name=fake.first_name(),
            last_name=last_name,
            email_verified=True,
            is_active=True,
            password=make_password(password),
            date_joined=fake.date_time(tzinfo=timezone.utc),
        )
        file.write(f'ID: {user.id}\t{email}\t{password}\n')
    # add extra researcher for public testing purposes
    last_name = 'Vyzkumnik'
    email = str.lower(last_name) + "@example.com"
    password = fake.password(length=12)
    user = User.objects.create(
        email=email,
        is_researcher=True,
        first_name='Demo',
        last_name=last_name,
        email_verified=True,
        is_active=True,
        password=make_password(password),
        date_joined=fake.date_time(tzinfo=timezone.utc),
    )
    file.write(f'ID: {user.id}\t{email}\t{password}\n')
    file.close()


@transaction.atomic
def add_staff_researcher(apps, schema_editor):
    User = apps.get_model(app_name, 'User')
    User.objects.create(
        email='littlemaugli001@gmail.com',
        first_name='Staff',
        last_name='Researcher',
        email_verified=True,
        confirmed_by_staff=True,
        is_active=True,
        is_staff=True,
        is_researcher=True,
        date_joined=fake.date_time(tzinfo=timezone.utc),
        password=make_password('little'),
    )
    User.objects.create(
        email='vyzkumnik-admin@example.com',
        first_name='Demo',
        last_name='Výzkumník Admin',
        email_verified=True,
        confirmed_by_staff=True,
        is_active=True,
        is_staff=True,
        is_researcher=True,
        date_joined=fake.date_time(tzinfo=timezone.utc),
        password=make_password('staffresearcherdemo'),
    )


def add_users(apps, schema_editor):
    add_approved_psychologists(apps, schema_editor)
    print('ADDED DEMO APPROVED PSYCHOLOGISTS\n')
    add_not_approved_psychologists(apps, schema_editor)
    print('ADDED DEMO NOT APPROVED PSYCHOLOGISTS\n')
    add_clients(apps, schema_editor)
    print('ADDED DEMO CLIENTS\n')
    add_researchers(apps, schema_editor)
    print('ADDED DEMO RESEARCHERS\n')
    add_staff_researcher(apps, schema_editor)
    print('ADDED DEMO STAFF RESEARCHER\n')


@transaction.atomic
def clean(apps, schema_editor):
    User = apps.get_model(app_name, 'User')
    User.objects.all().delete()
    # User.objects.filter(is_staff=True, is_researcher=True).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('accounts', '0002_add_super_user'),
    ]

    operations = [
        migrations.RunPython(add_users, reverse_code=clean)
    ]
