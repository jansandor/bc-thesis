# Generated by Django 3.2.8 on 2021-11-18 16:06

from django.db import migrations
from faker import Faker
from accounts.utils.user import user_types, sex_choices
import random
from django.db import transaction
from django.contrib.auth.hashers import make_password
from datetime import timezone

Faker.seed(0)
fake = Faker()  # (['cs'])
app_name = 'accounts'
psychologists_count = 20
clients_count = 30
researchers_count = 10
fake_certificate_file = 'accounts/user_fake/Training_plan.xlsx'


@transaction.atomic
def add_approved_psychologists(apps, schema_editor):
    User = apps.get_model(app_name, 'User')
    PsychologistProfile = apps.get_model(app_name, 'PsychologistProfile')
    file = open("/home/jan/PycharmProjects/bp/approved_fake_psychologists_raw_passwords.txt", "w")
    for i in range(0, psychologists_count):
        last_name = fake.unique.last_name()
        email = str.lower(last_name) + "@example.com"
        password = fake.password(length=12)
        user = User.objects.create(
            email=email,
            is_psychologist=True,
            first_name=fake.first_name(),
            last_name=last_name,
            email_verified=True,
            confirmed_by_staff=True,
            password=make_password(password),
            date_joined=fake.date_time(tzinfo=timezone.utc),
        )
        file.write(f'ID: {user.id}\t{email}\t{password}\n')
        user.save()
        PsychologistProfile.objects.create(
            user=user,
            user_type=user_types.PSYCHOLOGIST,
            academic_degree_before_name=fake.prefix(),
            academic_degree_after_name=fake.suffix(),
            certificate=fake_certificate_file,
            personal_key=fake.uuid4(),
        )
    file.close()


@transaction.atomic
def add_not_approved_psychologists(apps, schema_editor):
    User = apps.get_model(app_name, 'User')
    PsychologistProfile = apps.get_model(app_name, 'PsychologistProfile')
    for i in range(0, psychologists_count):
        last_name = fake.unique.last_name()
        user = User.objects.create(
            email=str.lower(last_name) + "@example.com",
            is_psychologist=True,
            first_name=fake.first_name(),
            last_name=last_name,
            email_verified=True,
            confirmed_by_staff=False,
            is_active=False,
            date_joined=fake.date_time(tzinfo=timezone.utc),
            password=make_password(fake.password(length=12)),
        )
        user.save()
        PsychologistProfile.objects.create(
            user=user,
            user_type=user_types.PSYCHOLOGIST,
            academic_degree_before_name=fake.prefix(),
            academic_degree_after_name=fake.suffix(),
            certificate=fake_certificate_file,
            personal_key=fake.uuid4(),
        )


@transaction.atomic
def add_clients(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    User = apps.get_model(app_name, 'User')
    ClientProfile = apps.get_model(app_name, 'ClientProfile')
    # is_active misto confirmed?
    psychologists = User.objects.filter(is_psychologist=True, confirmed_by_staff=True)
    for i in range(0, clients_count):
        last_name = fake.unique.last_name()
        user = User.objects.create(
            email=str.lower(last_name) + "@example.com",
            is_client=True,
            first_name=fake.first_name(),
            last_name=last_name,
            email_verified=True,
            password=make_password(fake.password(length=12)),
            date_joined=fake.date_time(tzinfo=timezone.utc),
        )
        user.save()
        random_index = random.randrange(len(psychologists))
        ClientProfile.objects.create(
            user=user,
            user_type=user_types.CLIENT,
            psychologist=psychologists[random_index],
            birthdate=fake.date_of_birth(),
            sex=sex_choices.MAN,
        )


def add_researchers(apps, schema_editor):
    User = apps.get_model(app_name, 'User')
    # ResearcherProfile = apps.get_model(app_name, 'ResearcherProfile')
    file = open("/home/jan/PycharmProjects/bp/fake_researchers_raw_passwords.txt", "w")
    for i in range(0, researchers_count):
        last_name = fake.unique.last_name()
        email = str.lower(last_name) + "@example.com"
        password = fake.password(length=12)
        user = User.objects.create(
            email=email,
            is_researcher=True,
            first_name=fake.first_name(),
            last_name=last_name,
            email_verified=True,
            password=make_password(password),
            date_joined=fake.date_time(tzinfo=timezone.utc),
        )
        file.write(f'ID: {user.id}\t{email}\t{password}\n')
    file.close()


@transaction.atomic
def add_staff_researcher(apps, schema_editor):
    User = apps.get_model(app_name, 'User')
    User.objects.create(
        email='littlemaugli001@gmail.com',
        first_name='Staff',
        last_name='Researcher',
        # email_verified=True,
        # confirmed_by_staff=True,
        is_active=True,
        is_staff=True,
        is_researcher=True,
        date_joined=fake.date_time(tzinfo=timezone.utc),
        password=make_password('little'),
    )


class Migration(migrations.Migration):
    dependencies = [
        ('accounts', '0011_alter_psychologistprofile_personal_key'),
    ]

    operations = [
        migrations.RunPython(add_approved_psychologists),
        migrations.RunPython(add_not_approved_psychologists),
        migrations.RunPython(add_clients),
        migrations.RunPython(add_researchers),
        migrations.RunPython(add_staff_researcher),
    ]
